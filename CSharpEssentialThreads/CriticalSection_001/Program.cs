using System;
using System.Threading;

// Критичейская секция (critical section)

// lock - блокирует участов кода, чтобы его мог выполнить только 1 поток
// остальные потоки будут ждать

namespace CriticalSection_001
{
    class ClassWithCriticalSection
    {
        /// <summary>
        /// Объект блокировки (объект синхронизации доступа к разделяемуму ресурсу)
        /// </summary>
        private object block = new object();

        public void MethodWithCriticalSection()
        {
            int threadHash = Thread.CurrentThread.GetHashCode();

            lock (block) // блокировка участка кода потоком (другой не может зайти)
            {
                for (int counter = 0; counter < 10; counter++)
                {
                    Console.WriteLine($"Поток № {threadHash}: шаг {counter}");
                    
                    Thread.Sleep(100);
                }
                
                Console.WriteLine(new string('-', 20));
            }
        }
    }
    
    class Program
    {
        static void Main(string[] args)
        {
            Console.SetWindowSize(80, 40);

            var classWithCriticalSection = new ClassWithCriticalSection();

            for (int i = 0; i < 3; i++)
            {
                new Thread(classWithCriticalSection.MethodWithCriticalSection).Start();
            }
            
            Thread.Sleep(500);
            
            Console.ReadLine();
        }
    }
}


// Результат
// Каждый поток идет последовательно
// 
// Поток № 4: шаг 0
// Поток № 4: шаг 1
// Поток № 4: шаг 2
// Поток № 4: шаг 3
// Поток № 4: шаг 4
// Поток № 4: шаг 5
// Поток № 4: шаг 6
// Поток № 4: шаг 7
// Поток № 4: шаг 8
// Поток № 4: шаг 9
// --------------------
// Поток № 5: шаг 0
// Поток № 5: шаг 1
// Поток № 5: шаг 2
// Поток № 5: шаг 3
// Поток № 5: шаг 4
// Поток № 5: шаг 5
// Поток № 5: шаг 6
// Поток № 5: шаг 7
// Поток № 5: шаг 8
// Поток № 5: шаг 9
// --------------------
// Поток № 6: шаг 0
// Поток № 6: шаг 1
// Поток № 6: шаг 2
// Поток № 6: шаг 3
// Поток № 6: шаг 4
// Поток № 6: шаг 5
// Поток № 6: шаг 6
// Поток № 6: шаг 7
// Поток № 6: шаг 8
// Поток № 6: шаг 9
// --------------------

// ---------------------------------------------
// Вариант без лока
// потоки выполняются параллельно

// Поток № 4: шаг 0
// Поток № 6: шаг 0
// Поток № 5: шаг 0
// Поток № 6: шаг 1
// Поток № 5: шаг 1
// Поток № 4: шаг 1
// Поток № 5: шаг 2
// Поток № 6: шаг 2
// Поток № 4: шаг 2
// Поток № 4: шаг 3
// Поток № 6: шаг 3
// Поток № 5: шаг 3
// Поток № 4: шаг 4
// Поток № 6: шаг 4
// Поток № 5: шаг 4
// Поток № 4: шаг 5
// Поток № 5: шаг 5
// Поток № 6: шаг 5
// Поток № 6: шаг 6
// Поток № 5: шаг 6
// Поток № 4: шаг 6
// Поток № 5: шаг 7
// Поток № 4: шаг 7
// Поток № 6: шаг 7
// Поток № 4: шаг 8
// Поток № 5: шаг 8
// Поток № 6: шаг 8
// Поток № 5: шаг 9
// Поток № 4: шаг 9
// Поток № 6: шаг 9
// --------------------
// --------------------
// --------------------
